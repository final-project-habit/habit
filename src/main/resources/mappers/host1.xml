<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- product.xml -->
<mapper namespace="host1">
    <!-- 대분류 전체 select -->
    <select id="cateListLage" resultType="java.util.Map">
        SELECT cate_large
        FROM habit.cate
        GROUP BY cate_large
    </select>

    <!-- 대분류에 따른 중분류 select -->
    <select id="cateListMiddle" parameterType="String" resultType="java.util.Map">
        SELECT cate_middle
        FROM habit.cate
        WHERE cate_large = #{cate_large}
    </select>

    <!-- 해당 카테고리의 cate_no 가져오기 -->
    <select id="selectCateNo" parameterType="String" resultType="String">
        SELECT cate_no
        FROM habit.cate
        WHERE cate_middle = #{cate_middle}
    </select>

    <!-- 콘텐츠 테이블 insert -->
    <insert id="insertCont" useGeneratedKeys="true" keyProperty="cont_no" parameterType="com.habit.host1.DTO.RequestContentValueDTO" >
        INSERT INTO cont (cate_no, host_id, cont_name, cont_zip, cont_addr1, cont_addr2, cont_extaddr, cont_endate, cont_img, cont_content, cont_hashtag1, cont_hashtag2, cont_hashtag3, cont_hashtag4, cont_hashtag5)
        values (#{cate_no}, #{host_id}, #{cont_name}, #{cont_zip}, #{cont_addr1}, #{cont_addr2}, #{cont_extaddr}, #{cont_endate},
        <foreach collection="cont_img" item="img" open="'" close="'" separator="|">${img}</foreach>
        , #{cont_content}, #{cont_hashtag1},
        <foreach collection="cont_hashtag2" item="hashtag2" open="'" close="'" separator="|">${hashtag2}</foreach>
        , #{cont_hashtag3},
        <foreach collection="cont_hashtag4" item="hashtag4" open="'" close="'" separator="|">${hashtag4}</foreach>
        , #{cont_hashtag5})
        <selectKey keyProperty="cont_no" resultType="int" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>
    </insert>

    <!--  콘텐츠 테이블 update  -->
    <update id="updateCont" parameterType="com.habit.host1.DTO.RequestContentValueDTO">
        update habit.cont
        set cate_no = #{cate_no}, cont_name = #{cont_name}, cont_zip = #{cont_zip},
            cont_addr1 = #{cont_addr1}, cont_addr2 = #{cont_addr2}, cont_extaddr = #{cont_extaddr},
            cont_img = <foreach collection="cont_img" item="img" open="'" close="'" separator="|">${img}</foreach>,
            cont_content = #{cont_content}, cont_endate = #{cont_endate}, cont_hashtag1 = #{cont_hashtag1},
            cont_hashtag2 = <foreach collection="cont_hashtag2" item="hashtag2" open="'" close="'" separator="|">${hashtag2}</foreach>,
            cont_hashtag3 = #{cont_hashtag3},
            cont_hashtag4 = <foreach collection="cont_hashtag4" item="hashtag4" open="'" close="'" separator="|">${hashtag4}</foreach>,
            cont_hashtag5 = #{cont_hashtag5}
        where cont_no = ${cont_no}
    </update>


    <!-- 원데이 클래스 테이블 insert -->
    <insert id="insertOne" parameterType="com.habit.host1.DTO.OneEntity">
        insert into one(pro_no, cont_no, one_date, one_maxqty, one_price)
        values
        <foreach collection="list" item="oneEntity" separator=",">
            (concat('o_no',nextval(habit.sq_one)), #{oneEntity.cont_no}, #{oneEntity.one_date}, #{oneEntity.one_maxqty}, #{oneEntity.one_price})
        </foreach>
    </insert>

    <!-- 원데이 클래스 테이블 delete -->
    <delete id="deleteOne" parameterType="int">
        delete from one where cont_no = ${cont_no}
    </delete>


    <!-- 회차권/인원권 테이블 insert -->
    <insert id="insertProd" parameterType="com.habit.host1.DTO.ProdEntity">
        insert into prod(pro_no, cont_no, prod_name, prod_qty, prod_price)
        values
        <foreach collection="list" item="prodEntity" separator=",">
            (concat('p_no',nextval(habit.sq_prod)), #{prodEntity.cont_no}, #{prodEntity.prod_name}, #{prodEntity.prod_qty}, #{prodEntity.prod_price})
        </foreach>
    </insert>

    <!--  회차권/인원권 테이블 delete  -->
    <delete id="deleteProd" parameterType="int">
        delete from prod where cont_no = ${cont_no}
    </delete>

    <!-- 리뷰 리스트 불러오기 -->
    <select id="reviewList" parameterType="com.habit.host1.DTO.RequestReviewDTO" resultType="com.habit.host1.DTO.ResponseReviewDTO">
        select user_id, cont_name, review_star, review_cont, review_date, review_no
        from habit.review a join habit.cont b
        on a.cont_no = b.cont_no
        where host_id = #{host_id} and review_status = 'Y'
        <if test="filter != null">
            <if test="starScore != null">
                and <foreach collection="starScore" item="score" separator="or" open="(" close=")">review_star = ${score}</foreach>
            </if>
            <if test='!reviewContKeyword.equals("")'>and review_cont like concat('%',#{reviewContKeyword},'%')</if>
            <if test='!searchUserId.equals("")'>and user_id = #{searchUserId}</if>
        </if>
        order by review_date desc
        limit ${vo.recordPerPage} offset ${vo.offset}
    </select>

    <!-- 리뷰 리스트 count(*)-->
    <select id="reviewCount" parameterType="com.habit.host1.DTO.RequestReviewDTO" resultType="int">
        select count(*)
        from habit.review a join habit.cont b
        on a.cont_no = b.cont_no
        where host_id = #{host_id} and review_status = 'Y'
        <if test="filter != null">
            <if test="starScore != null">
                and <foreach collection="starScore" item="score" separator="or" open="(" close=")">review_star = ${score}</foreach>
            </if>
            <if test='!reviewContKeyword.equals("")'>and review_cont like concat('%',#{reviewContKeyword},'%')</if>
            <if test='!searchUserId.equals("")'>and user_id = #{searchUserId}</if>
        </if>
    </select>

    <!-- 리뷰 삭제 (상태 변경) -->
    <update id="reviewDelete" parameterType="int">
        update habit.review
        set review_status = 'N'
        where review_no = ${review_no}
    </update>

    <!--  문의 조회  -->
    <select id="inquiryList" parameterType="com.habit.host1.DTO.RequestInquiryDTO" resultType="com.habit.host1.DTO.ResponseInquiryDTO">
        select id, cont_name, q_question, q_bedate, q_div, q_group, a.cont_no, q_status
        from question a join cont b on a.cont_no = b.cont_no
        where host_id = #{host_id} and q_div = 'U'
        <if test='!searchStartDate.equals("")'>
            and q_bedate between #{searchStartDate} and #{searchEndDate}
        </if>
        <if test='!searchKeyword.equals("")'>
            and ${searchKeywordType} like concat('%',#{searchKeyword},'%')
        </if>
        order by q_bedate desc
    </select>

    <!--  검색한 문의 count  -->
    <select id="inquiryCount" parameterType="com.habit.host1.DTO.RequestInquiryDTO" resultType="int">
        select count(*)
        from question a join cont b on a.cont_no = b.cont_no
        where host_id = #{host_id} and q_div = 'U'
        <if test='!searchStartDate.equals("")'>
            and q_bedate between #{searchStartDate} and #{searchEndDate}
        </if>
        <if test='!searchKeyword.equals("")'>
            and ${searchKeywordType} like concat('%',#{searchKeyword},'%')
        </if>
    </select>

    <!-- 해빗 리스트 조회 -->
    <select id="contentList" parameterType="com.habit.host1.DTO.RequestContentListDTO" resultType="com.habit.host1.DTO.ResponseContentListDTO">
        select host_id, cont_no, cont_img, cont_name, cont_stdate, cont_endate, cate_middle, cate_large
        from cont a join cate b
        on a.cate_no = b.cate_no
        where host_id = #{host_id}
        <if test="filter != null">
            <if test='!cont_name.equals("")'>
                and cont_name like concat('%',#{cont_name},'%')
            </if>
            <if test='!(searchStartDate.equals("") and searchStartDate.equals(""))'>
                and ${searchDateType} between #{searchStartDate} and #{searchEndDate}
            </if>
            <if test="cont_status != null">
                and <foreach collection="cont_status" item="status" separator="or" open="(" close=")">cont_status = #{status}</foreach>
            </if>
            <choose>
                <when test='!(searchStartDate.equals("") and searchStartDate.equals(""))'>
                    order by ${searchDateType} desc
                </when>
                <otherwise>
                    order by cont_stdate desc
                </otherwise>
            </choose>
        </if>
        <if test="filter == null">
            order by cont_stdate desc
        </if>
        limit ${vo.appendRow} offset ${vo.offset}
    </select>

    <!-- 해빗 리스트 조회 count -->
    <select id="contentListCount" parameterType="com.habit.host1.DTO.RequestContentListDTO" resultType="int">
        select count(*)
        from cont a join cate b
        on a.cate_no = b.cate_no
        where host_id = #{host_id}
        <if test="filter != null">
            <if test='!cont_name.equals("")'>
                and cont_name like concat('%',#{cont_name},'%')
            </if>
            <if test='!(searchStartDate.equals("") and searchStartDate.equals(""))'>
                and ${searchDateType} between #{searchStartDate} and #{searchEndDate}
            </if>
            <if test="cont_status != null">
                and <foreach collection="cont_status" item="status" separator="or" open="(" close=")">cont_status = #{status}</foreach>
            </if>
        </if>
    </select>

    <!--  해빗 삭제  -->
    <delete id="deleteContent" parameterType="int">
        delete from cont where cont_no = ${cont_no}
    </delete>
    
    <!--  해빗 수정 전 값 불러오기  -->
    <select id="contentSelectOne" parameterType="int" resultType="com.habit.host1.DTO.CategoryAndContentVO">
        select cate_large, cate_middle, cont_name, cont_zip, cont_addr1, cont_addr2, cont_extaddr, cont_hashtag1, cont_hashtag2,
               cont_hashtag3, cont_hashtag4, cont_hashtag5, cont_stdate, cont_endate, cont_img, cont_content
        from cont a join cate b
        on a.cate_no = b.cate_no
        where cont_no = ${cont_no}
    </select>

    <select id="oneList" parameterType="int" resultType="com.habit.host1.DTO.OneEntity">
        select one_date, one_maxqty, one_price, pro_no
        from one
        where cont_no = ${cont_no}
    </select>

    <select id="prodList" parameterType="int" resultType="com.habit.host1.DTO.ProdEntity">
        select prod_name, prod_qty, prod_price, pro_no
        from prod
        where cont_no = ${cont_no}
    </select>

    <!-- 원데이 클래스 리스트 조회 -->
    <select id="reservationList" parameterType="com.habit.host1.DTO.RequestReservationDTO" resultType="com.habit.host1.DTO.ResponseReservationDTO">
        select e.*, cont_name
        from (select c.*, one_date, cont_no
              from (select a.user_id, user_gender, user_phone, payd_no, payd_qty, payd_status, pro_no
                    from payd a
                    join user b
                    on a.user_id = b.user_id) c
              join one d
              on c.pro_no = d.pro_no) e
        join cont f
        on e.cont_no = f.cont_no
        where host_id = #{host_id}
        <if test="filter != null">
            <if test='!cont_name.equals("")'>
                and cont_name like concat('%',#{cont_name},'%')
            </if>
            <if test='!(searchStartDate.equals("") and searchStartDate.equals(""))'>
                and one_date between #{searchStartDate} and #{searchEndDate}
            </if>
            <if test='!searchKeyword.equals("")'>
                and ${searchType} like concat('%',#{searchKeyword},'%')
            </if>
            <if test='!payd_status != null'>
                and <foreach collection="payd_status" item="status" separator="or" open="(" close=")">payd_status = #{status}</foreach>
            </if>
        </if>
        order by one_date desc
        limit ${vo.recordPerPage} offset ${vo.offset}
    </select>

    <!-- 원데이 클래스 리스트 count -->
    <select id="reservationListCount" parameterType="com.habit.host1.DTO.RequestReservationDTO" resultType="int">
        select count(*)
        from (select c.*, one_date, cont_no
              from (select a.user_id, user_gender, user_phone, payd_qty, payd_no, payd_status, pro_no
                    from payd a
                    join user b
                    on a.user_id = b.user_id) c
              join one d
              on c.pro_no = d.pro_no) e
        join cont f
        on e.cont_no = f.cont_no
        where host_id = #{host_id}
        <if test="filter != null">
            <if test='!cont_name.equals("")'>
                and cont_name like concat('%',#{cont_name},'%')
            </if>
            <if test='!(searchStartDate.equals("") and searchStartDate.equals(""))'>
                and one_date between #{searchStartDate} and #{searchEndDate}
            </if>
            <if test='!searchKeyword.equals("")'>
                and ${searchType} like concat('%',#{searchKeyword},'%')
            </if>
            <if test='!payd_status != null'>
                and <foreach collection="payd_status" item="status" separator="or" open="(" close=")">payd_status = #{status}</foreach>
            </if>
        </if>
    </select>

    <!--  원데이 클래스 예약 상태변경(주문상세 상태변경)  -->
    <update id="reservationStatusChange" parameterType="com.habit.host1.DTO.RequestReservationStatusChangeDTO">
        update payd
        set payd_status = #{payd_status}, refn_status = #{refn_status}
        where payd_no = ${payd_no}
    </update>

    <!--  환불 처리를 위해 주문서, 주문상세에서 값 가져오기  -->
    <select id="selectPayDetailForInsertRefund" parameterType="String" resultType="com.habit.host1.DTO.SelectPayDetailForInsertRefundDTO">
        select payd_no, a.user_id, pro_no, payd_price, payd_qty, pay_point, pay_method
        from payd a join pay b
                         on a.pay_no = b.pay_no
        where payd_no = ${payd_no}
    </select>

    <!--  주문상세 상태 가져오기  -->
    <select id="selectPayDetailStatus" parameterType="int" resultType="String">
        select payd_status
        from payd
        where pay_no = (select pay_no from payd where payd_no = ${payd_no})
    </select>

    <!--  환불테이블 insert  -->
    <insert id="InsertRefund" parameterType="com.habit.host1.DTO.SelectPayDetailForInsertRefundDTO">
        insert into refn (payd_no, user_id, pro_no, refn_qty, refn_point, refn_pay, refn_method)
        values (${payd_no}, #{user_id}, #{pro_no}, ${payd_qty}, ${refn_point}, ${refn_pay}, #{pay_method})
    </insert>

    <!--  에너지 테이블 insert -->
    <insert id="insertEnergy" parameterType="com.habit.host1.DTO.EnergyEntity">
        insert into habit.energy (user_id, energy_saveuse, energy_sources)
        values ( #{user_id}, ${energy_saveuse}, #{energy_sources} )
    </insert>

    <!--  멤버 등급 조회  -->
    <select id="selectUserLevel" parameterType="String" resultType="String">
        select user_level
        from user
        where user_id = #{user_id}
    </select>






    <select id="contentSelectOne1" parameterType="int" resultType="com.habit.host1.DTO.CategoryAndContentVO">
        select cate_large, cate_middle, cont_name, cont_zip, cont_addr1, cont_addr2, cont_extaddr,
               cont_hashtag1, cont_hashtag2, cont_hashtag3, cont_hashtag4, cont_hashtag5,
               cont_endate, cont_img, cont_content
        from cont a join cate b
        on a.cate_no = b.cate_no
        where cont_no = ${cont_no}
    </select>





</mapper>